/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SchwabRouteImport } from './routes/schwab'
import { Route as ResetPasswordRouteImport } from './routes/reset-password'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as PlanningRouteImport } from './routes/planning'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ForgotPasswordRouteImport } from './routes/forgot-password'
import { Route as DataFeedsRouteImport } from './routes/data-feeds'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SleevesIndexRouteImport } from './routes/sleeves/index'
import { Route as RebalancingGroupsIndexRouteImport } from './routes/rebalancing-groups/index'
import { Route as ModelsIndexRouteImport } from './routes/models/index'
import { Route as DataFeedsIndexRouteImport } from './routes/data-feeds/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as SettingsSecuritiesRouteImport } from './routes/settings/securities'
import { Route as SchwabCallbackRouteImport } from './routes/schwab/callback'
import { Route as RebalancingGroupsGroupIdRouteImport } from './routes/rebalancing-groups/$groupId'
import { Route as DemoSchwabOauthRouteImport } from './routes/demo/schwab-oauth'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminStatsRouteImport } from './routes/admin/stats'
import { Route as ApiWorkersYahooSyncRouteImport } from './routes/api/workers/yahoo-sync'

const SchwabRoute = SchwabRouteImport.update({
  id: '/schwab',
  path: '/schwab',
  getParentRoute: () => rootRouteImport,
} as any)
const ResetPasswordRoute = ResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const PlanningRoute = PlanningRouteImport.update({
  id: '/planning',
  path: '/planning',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgotPasswordRoute = ForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const DataFeedsRoute = DataFeedsRouteImport.update({
  id: '/data-feeds',
  path: '/data-feeds',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SleevesIndexRoute = SleevesIndexRouteImport.update({
  id: '/sleeves/',
  path: '/sleeves/',
  getParentRoute: () => rootRouteImport,
} as any)
const RebalancingGroupsIndexRoute = RebalancingGroupsIndexRouteImport.update({
  id: '/rebalancing-groups/',
  path: '/rebalancing-groups/',
  getParentRoute: () => rootRouteImport,
} as any)
const ModelsIndexRoute = ModelsIndexRouteImport.update({
  id: '/models/',
  path: '/models/',
  getParentRoute: () => rootRouteImport,
} as any)
const DataFeedsIndexRoute = DataFeedsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DataFeedsRoute,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const SettingsSecuritiesRoute = SettingsSecuritiesRouteImport.update({
  id: '/settings/securities',
  path: '/settings/securities',
  getParentRoute: () => rootRouteImport,
} as any)
const SchwabCallbackRoute = SchwabCallbackRouteImport.update({
  id: '/callback',
  path: '/callback',
  getParentRoute: () => SchwabRoute,
} as any)
const RebalancingGroupsGroupIdRoute =
  RebalancingGroupsGroupIdRouteImport.update({
    id: '/rebalancing-groups/$groupId',
    path: '/rebalancing-groups/$groupId',
    getParentRoute: () => rootRouteImport,
  } as any)
const DemoSchwabOauthRoute = DemoSchwabOauthRouteImport.update({
  id: '/demo/schwab-oauth',
  path: '/demo/schwab-oauth',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRoute,
} as any)
const AdminStatsRoute = AdminStatsRouteImport.update({
  id: '/stats',
  path: '/stats',
  getParentRoute: () => AdminRoute,
} as any)
const ApiWorkersYahooSyncRoute = ApiWorkersYahooSyncRouteImport.update({
  id: '/api/workers/yahoo-sync',
  path: '/api/workers/yahoo-sync',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/data-feeds': typeof DataFeedsRouteWithChildren
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/planning': typeof PlanningRoute
  '/register': typeof RegisterRoute
  '/reset-password': typeof ResetPasswordRoute
  '/schwab': typeof SchwabRouteWithChildren
  '/admin/stats': typeof AdminStatsRoute
  '/admin/users': typeof AdminUsersRoute
  '/demo/schwab-oauth': typeof DemoSchwabOauthRoute
  '/rebalancing-groups/$groupId': typeof RebalancingGroupsGroupIdRoute
  '/schwab/callback': typeof SchwabCallbackRoute
  '/settings/securities': typeof SettingsSecuritiesRoute
  '/admin/': typeof AdminIndexRoute
  '/data-feeds/': typeof DataFeedsIndexRoute
  '/models': typeof ModelsIndexRoute
  '/rebalancing-groups': typeof RebalancingGroupsIndexRoute
  '/sleeves': typeof SleevesIndexRoute
  '/api/workers/yahoo-sync': typeof ApiWorkersYahooSyncRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/planning': typeof PlanningRoute
  '/register': typeof RegisterRoute
  '/reset-password': typeof ResetPasswordRoute
  '/schwab': typeof SchwabRouteWithChildren
  '/admin/stats': typeof AdminStatsRoute
  '/admin/users': typeof AdminUsersRoute
  '/demo/schwab-oauth': typeof DemoSchwabOauthRoute
  '/rebalancing-groups/$groupId': typeof RebalancingGroupsGroupIdRoute
  '/schwab/callback': typeof SchwabCallbackRoute
  '/settings/securities': typeof SettingsSecuritiesRoute
  '/admin': typeof AdminIndexRoute
  '/data-feeds': typeof DataFeedsIndexRoute
  '/models': typeof ModelsIndexRoute
  '/rebalancing-groups': typeof RebalancingGroupsIndexRoute
  '/sleeves': typeof SleevesIndexRoute
  '/api/workers/yahoo-sync': typeof ApiWorkersYahooSyncRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/data-feeds': typeof DataFeedsRouteWithChildren
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/planning': typeof PlanningRoute
  '/register': typeof RegisterRoute
  '/reset-password': typeof ResetPasswordRoute
  '/schwab': typeof SchwabRouteWithChildren
  '/admin/stats': typeof AdminStatsRoute
  '/admin/users': typeof AdminUsersRoute
  '/demo/schwab-oauth': typeof DemoSchwabOauthRoute
  '/rebalancing-groups/$groupId': typeof RebalancingGroupsGroupIdRoute
  '/schwab/callback': typeof SchwabCallbackRoute
  '/settings/securities': typeof SettingsSecuritiesRoute
  '/admin/': typeof AdminIndexRoute
  '/data-feeds/': typeof DataFeedsIndexRoute
  '/models/': typeof ModelsIndexRoute
  '/rebalancing-groups/': typeof RebalancingGroupsIndexRoute
  '/sleeves/': typeof SleevesIndexRoute
  '/api/workers/yahoo-sync': typeof ApiWorkersYahooSyncRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/data-feeds'
    | '/forgot-password'
    | '/login'
    | '/planning'
    | '/register'
    | '/reset-password'
    | '/schwab'
    | '/admin/stats'
    | '/admin/users'
    | '/demo/schwab-oauth'
    | '/rebalancing-groups/$groupId'
    | '/schwab/callback'
    | '/settings/securities'
    | '/admin/'
    | '/data-feeds/'
    | '/models'
    | '/rebalancing-groups'
    | '/sleeves'
    | '/api/workers/yahoo-sync'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/planning'
    | '/register'
    | '/reset-password'
    | '/schwab'
    | '/admin/stats'
    | '/admin/users'
    | '/demo/schwab-oauth'
    | '/rebalancing-groups/$groupId'
    | '/schwab/callback'
    | '/settings/securities'
    | '/admin'
    | '/data-feeds'
    | '/models'
    | '/rebalancing-groups'
    | '/sleeves'
    | '/api/workers/yahoo-sync'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/data-feeds'
    | '/forgot-password'
    | '/login'
    | '/planning'
    | '/register'
    | '/reset-password'
    | '/schwab'
    | '/admin/stats'
    | '/admin/users'
    | '/demo/schwab-oauth'
    | '/rebalancing-groups/$groupId'
    | '/schwab/callback'
    | '/settings/securities'
    | '/admin/'
    | '/data-feeds/'
    | '/models/'
    | '/rebalancing-groups/'
    | '/sleeves/'
    | '/api/workers/yahoo-sync'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  DataFeedsRoute: typeof DataFeedsRouteWithChildren
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  LoginRoute: typeof LoginRoute
  PlanningRoute: typeof PlanningRoute
  RegisterRoute: typeof RegisterRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
  SchwabRoute: typeof SchwabRouteWithChildren
  DemoSchwabOauthRoute: typeof DemoSchwabOauthRoute
  RebalancingGroupsGroupIdRoute: typeof RebalancingGroupsGroupIdRoute
  SettingsSecuritiesRoute: typeof SettingsSecuritiesRoute
  ModelsIndexRoute: typeof ModelsIndexRoute
  RebalancingGroupsIndexRoute: typeof RebalancingGroupsIndexRoute
  SleevesIndexRoute: typeof SleevesIndexRoute
  ApiWorkersYahooSyncRoute: typeof ApiWorkersYahooSyncRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/schwab': {
      id: '/schwab'
      path: '/schwab'
      fullPath: '/schwab'
      preLoaderRoute: typeof SchwabRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/planning': {
      id: '/planning'
      path: '/planning'
      fullPath: '/planning'
      preLoaderRoute: typeof PlanningRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data-feeds': {
      id: '/data-feeds'
      path: '/data-feeds'
      fullPath: '/data-feeds'
      preLoaderRoute: typeof DataFeedsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sleeves/': {
      id: '/sleeves/'
      path: '/sleeves'
      fullPath: '/sleeves'
      preLoaderRoute: typeof SleevesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rebalancing-groups/': {
      id: '/rebalancing-groups/'
      path: '/rebalancing-groups'
      fullPath: '/rebalancing-groups'
      preLoaderRoute: typeof RebalancingGroupsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/models/': {
      id: '/models/'
      path: '/models'
      fullPath: '/models'
      preLoaderRoute: typeof ModelsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data-feeds/': {
      id: '/data-feeds/'
      path: '/'
      fullPath: '/data-feeds/'
      preLoaderRoute: typeof DataFeedsIndexRouteImport
      parentRoute: typeof DataFeedsRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/settings/securities': {
      id: '/settings/securities'
      path: '/settings/securities'
      fullPath: '/settings/securities'
      preLoaderRoute: typeof SettingsSecuritiesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/schwab/callback': {
      id: '/schwab/callback'
      path: '/callback'
      fullPath: '/schwab/callback'
      preLoaderRoute: typeof SchwabCallbackRouteImport
      parentRoute: typeof SchwabRoute
    }
    '/rebalancing-groups/$groupId': {
      id: '/rebalancing-groups/$groupId'
      path: '/rebalancing-groups/$groupId'
      fullPath: '/rebalancing-groups/$groupId'
      preLoaderRoute: typeof RebalancingGroupsGroupIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/schwab-oauth': {
      id: '/demo/schwab-oauth'
      path: '/demo/schwab-oauth'
      fullPath: '/demo/schwab-oauth'
      preLoaderRoute: typeof DemoSchwabOauthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/stats': {
      id: '/admin/stats'
      path: '/stats'
      fullPath: '/admin/stats'
      preLoaderRoute: typeof AdminStatsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/api/workers/yahoo-sync': {
      id: '/api/workers/yahoo-sync'
      path: '/api/workers/yahoo-sync'
      fullPath: '/api/workers/yahoo-sync'
      preLoaderRoute: typeof ApiWorkersYahooSyncRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AdminRouteChildren {
  AdminStatsRoute: typeof AdminStatsRoute
  AdminUsersRoute: typeof AdminUsersRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminStatsRoute: AdminStatsRoute,
  AdminUsersRoute: AdminUsersRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface DataFeedsRouteChildren {
  DataFeedsIndexRoute: typeof DataFeedsIndexRoute
}

const DataFeedsRouteChildren: DataFeedsRouteChildren = {
  DataFeedsIndexRoute: DataFeedsIndexRoute,
}

const DataFeedsRouteWithChildren = DataFeedsRoute._addFileChildren(
  DataFeedsRouteChildren,
)

interface SchwabRouteChildren {
  SchwabCallbackRoute: typeof SchwabCallbackRoute
}

const SchwabRouteChildren: SchwabRouteChildren = {
  SchwabCallbackRoute: SchwabCallbackRoute,
}

const SchwabRouteWithChildren =
  SchwabRoute._addFileChildren(SchwabRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  DataFeedsRoute: DataFeedsRouteWithChildren,
  ForgotPasswordRoute: ForgotPasswordRoute,
  LoginRoute: LoginRoute,
  PlanningRoute: PlanningRoute,
  RegisterRoute: RegisterRoute,
  ResetPasswordRoute: ResetPasswordRoute,
  SchwabRoute: SchwabRouteWithChildren,
  DemoSchwabOauthRoute: DemoSchwabOauthRoute,
  RebalancingGroupsGroupIdRoute: RebalancingGroupsGroupIdRoute,
  SettingsSecuritiesRoute: SettingsSecuritiesRoute,
  ModelsIndexRoute: ModelsIndexRoute,
  RebalancingGroupsIndexRoute: RebalancingGroupsIndexRoute,
  SleevesIndexRoute: SleevesIndexRoute,
  ApiWorkersYahooSyncRoute: ApiWorkersYahooSyncRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
